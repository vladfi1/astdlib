package a.natives;
/**
* Definition and enrichment for type 'Key'
* @author tolleder
*/

typedef Key uses int;
enrich Key
{
    /**
    *       If this constant is used in addEventKeyPressed the trigger will be executed for every key
    *       press/release fulfilling the other filters.
    */
    public static const Key KEY_ANY = (Key)c_keyNone;

    public static const Key KEY_NONE = (Key)c_keyNone;
    public static const Key KEY_SHIFT = (Key)c_keyShift;
    public static const Key KEY_CONTROL = (Key)c_keyControl;
    public static const Key KEY_ALT = (Key)c_keyAlt;
    public static const Key KEY_0 = (Key)c_key0;
    public static const Key KEY_1 = (Key)c_key1;
    public static const Key KEY_2 = (Key)c_key2;
    public static const Key KEY_3 = (Key)c_key3;
    public static const Key KEY_4 = (Key)c_key4;
    public static const Key KEY_5 = (Key)c_key5;
    public static const Key KEY_6 = (Key)c_key6;
    public static const Key KEY_7 = (Key)c_key7;
    public static const Key KEY_8 = (Key)c_key8;
    public static const Key KEY_9 = (Key)c_key9;
    public static const Key KEY_A = (Key)c_keyA;
    public static const Key KEY_B = (Key)c_keyB;
    public static const Key KEY_C = (Key)c_keyC;
    public static const Key KEY_D = (Key)c_keyD;
    public static const Key KEY_E = (Key)c_keyE;
    public static const Key KEY_F = (Key)c_keyF;
    public static const Key KEY_G = (Key)c_keyG;
    public static const Key KEY_H = (Key)c_keyH;
    public static const Key KEY_I = (Key)c_keyI;
    public static const Key KEY_J = (Key)c_keyJ;
    public static const Key KEY_K = (Key)c_keyK;
    public static const Key KEY_L = (Key)c_keyL;
    public static const Key KEY_M = (Key)c_keyM;
    public static const Key KEY_N = (Key)c_keyN;
    public static const Key KEY_O = (Key)c_keyO;
    public static const Key KEY_P = (Key)c_keyP;
    public static const Key KEY_Q = (Key)c_keyQ;
    public static const Key KEY_R = (Key)c_keyR;
    public static const Key KEY_S = (Key)c_keyS;
    public static const Key KEY_T = (Key)c_keyT;
    public static const Key KEY_U = (Key)c_keyU;
    public static const Key KEY_V = (Key)c_keyV;
    public static const Key KEY_W = (Key)c_keyW;
    public static const Key KEY_X = (Key)c_keyX;
    public static const Key KEY_Y = (Key)c_keyY;
    public static const Key KEY_Z = (Key)c_keyZ;
    public static const Key KEY_SPACE = (Key)c_keySpace;
    public static const Key KEY_GRAVE = (Key)c_keyGrave;
    public static const Key KEY_NUMPAD0 = (Key)c_keyNumPad0;
    public static const Key KEY_NUMPAD1 = (Key)c_keyNumPad1;
    public static const Key KEY_NUMPAD2 = (Key)c_keyNumPad2;
    public static const Key KEY_NUMPAD3 = (Key)c_keyNumPad3;
    public static const Key KEY_NUMPAD4 = (Key)c_keyNumPad4;
    public static const Key KEY_NUMPAD5 = (Key)c_keyNumPad5;
    public static const Key KEY_NUMPAD6 = (Key)c_keyNumPad6;
    public static const Key KEY_NUMPAD7 = (Key)c_keyNumPad7;
    public static const Key KEY_NUMPAD8 = (Key)c_keyNumPad8;
    public static const Key KEY_NUMPAD9 = (Key)c_keyNumPad9;
    public static const Key KEY_NUMPADPLUS = (Key)c_keyNumPadPlus;
    public static const Key KEY_NUMPADMINUS = (Key)c_keyNumPadMinus;
    public static const Key KEY_NUMPADMULTIPLY = (Key)c_keyNumPadMultiply;
    public static const Key KEY_NUMPADDIVIDE = (Key)c_keyNumPadDivide;
    public static const Key KEY_NUMPADDECIMAL = (Key)c_keyNumPadDecimal;
    public static const Key KEY_EQUALS = (Key)c_keyEquals;
    public static const Key KEY_MINUS = (Key)c_keyMinus;
    public static const Key KEY_BRACKETOPEN = (Key)c_keyBracketOpen;
    public static const Key KEY_BRACKETCLOSE = (Key)c_keyBracketClose;
    public static const Key KEY_BACKSLASH = (Key)c_keyBackSlash;
    public static const Key KEY_SEMICOLON = (Key)c_keySemiColon;
    public static const Key KEY_APOSTROPHE = (Key)c_keyApostrophe;
    public static const Key KEY_COMMA = (Key)c_keyComma;
    public static const Key KEY_PERIOD = (Key)c_keyPeriod;
    public static const Key KEY_SLASH = (Key)c_keySlash;
    public static const Key KEY_ESCAPE = (Key)c_keyEscape;
    public static const Key KEY_ENTER = (Key)c_keyEnter;
    public static const Key KEY_BACKSPACE = (Key)c_keyBackSpace;
    public static const Key KEY_TAB = (Key)c_keyTab;
    public static const Key KEY_LEFT = (Key)c_keyLeft;
    public static const Key KEY_UP = (Key)c_keyUp;
    public static const Key KEY_RIGHT = (Key)c_keyRight;
    public static const Key KEY_DOWN = (Key)c_keyDown;
    public static const Key KEY_INSERT = (Key)c_keyInsert;
    public static const Key KEY_DELETE = (Key)c_keyDelete;
    public static const Key KEY_HOME = (Key)c_keyHome;
    public static const Key KEY_END = (Key)c_keyEnd;
    public static const Key KEY_PAGEUP = (Key)c_keyPageUp;
    public static const Key KEY_PAGEDOWN = (Key)c_keyPageDown;
    public static const Key KEY_CAPSLOCK = (Key)c_keyCapsLock;
    public static const Key KEY_NUMLOCK = (Key)c_keyNumLock;
    public static const Key KEY_SCROLLLOCK = (Key)c_keyScrollLock;
    public static const Key KEY_PAUSE = (Key)c_keyPause;
    public static const Key KEY_PRINTSCREEN = (Key)c_keyPrintScreen;
    public static const Key KEY_NEXTTRACK = (Key)c_keyNextTrack;
    public static const Key KEY_PREVTRACK = (Key)c_keyPrevTrack;
    public static const Key KEY_F1 = (Key)c_keyF1;
    public static const Key KEY_F2 = (Key)c_keyF2;
    public static const Key KEY_F3 = (Key)c_keyF3;
    public static const Key KEY_F4 = (Key)c_keyF4;
    public static const Key KEY_F5 = (Key)c_keyF5;
    public static const Key KEY_F6 = (Key)c_keyF6;
    public static const Key KEY_F7 = (Key)c_keyF7;
    public static const Key KEY_F8 = (Key)c_keyF8;
    public static const Key KEY_F9 = (Key)c_keyF9;
    public static const Key KEY_F10 = (Key)c_keyF10;
    public static const Key KEY_F11 = (Key)c_keyF11;
    public static const Key KEY_F12 = (Key)c_keyF12;
}