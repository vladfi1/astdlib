package a.util;

import a.util.ArrayList;

public class ArraySet<E> extends Set<E> {

  private ArrayList<int> list;
  private int size;
  
  public ArraySet() {
    list = new ArrayList<int>();
    size = 0;
  }
  
  public ~ArraySet() {
    delete list;
  }

  public override bool isEmpty() {
    return size == 0;
  }
  
  public override int size() {
    return size;
  }
  
  /**
   * Clears all entries from this Map.
   */
  public override void clear() {
    list.clear();
    size = 0;
  }
  
  private void ensure(E e) {
    while ((int) e >= list.size()) {
      list.addLast(0);
    }
  }
  
  public override bool add(E e) {
    if (contains(e)) return false;
    list.setIndex((int)e, 1);
    size += 1;
    return true;
  }
  
  public override bool contains(E e) {
    ensure(e);
    return list.getIndex((int)e) != 0;
  }
  
  public override bool remove(E e) {
    if (contains(e)) {
      list.setIndex((int)e, 0);
      size -= 1;
      return true;
    }
    return false;
  }
  
  public override Iterator<E> getIterator() {
    return new ArraySetIterator<E>(list);
  }
}

private class ArraySetIterator<E> extends Iterator<E> {
  private ArrayList<int> list;
  private int index;
  
  ArraySetIterator(ArrayList<int> list) {
    this.list = list;
    this.index = 0;
  }
  
  public override bool hasNext() {
    while(index < list.size()) {
      if (list.getIndex(index) != 0) {
        return true;
      }
      index += 1;
    }
    return false;
  }
  
  public override E next() {
    E temp = (E) index;
    index += 1;
    return temp;
  }
  
  public override void remove() {
    list.setIndex(index, 0);
  }
}
