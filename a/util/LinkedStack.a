package a.util;

import a.util.Iterable;
import a.util.Iterator;

/**
 * Stack implementation using a singly linked list.
 * @author XPilot
 */
public class LinkedStack<E> extends Iterable<E> {
	/**
	 * The size of the stack.
	 */
	private int size;
	
	/**
	 * The first link in the list.
	 */
	StackLink<E> head;
	
	/**
	 * Empty stack.
	 */
	public LinkedStack() {
		size = 0;
		head = null;
	}
	
	/**
	 * Clears the stack.
	 */
	public ~LinkedStack() {
		clear();
	}
	
	/**
	 * @return the size of this stack.
	 */
	public int getSize() {return size;}
	
	/**
	 * @return Whether this stack is empty.
	 */
	public bool isEmpty() {return size == 0;}
	
	/**
	 * Clears all data from this stack.
	 */
	public void clear() {
		while(head != null) {
			StackLink<E> temp = head;
			head = head.next;
			delete temp;
		}
		size = 0;
	}
	
	/**
	 * Pushes an element onto the stack.
	 */
	public void push(E element) {
		head = new StackLink<E>(element, head);
		++size;
	}
	
	/**
	 * Pops an element from the stack.
	 * @return The top element of the stack.
	 */
	public E pop() {
		if(isEmpty()) return null;
		else {
			StackLink<E> temp = head;
			E e = head.element;
			head = head.next;
			delete temp;
			--size;
			return e;
		}
	}
	
	/**
	 * Does not modify the stack.
	 * @return The top element of the stack.
	 */
	public E peek() {
		if(isEmpty()) return null;
		else return head.element;
	}
	
	/**
	 * @return An iterator for this LinkedStack.
	 */
	public Iterator<E> getIterator() {
		return new LinkedStackIterator<E>(this);
	}
}

/**
 * The links in a LinkedStack.
 */
private class StackLink<E> [256] {
	/**
	 * The element in this link.
	 */
	E element;
	/**
	 * The next link.
	 */
	StackLink<E> next;
	
	StackLink(E element, StackLink<E> next) {
		this.element = element;
		this.next = next;
	}
}

/**
 * Iterator for LinkedStack.
 */
private class LinkedStackIterator<E> extends Iterator<E> {
	private StackLink<E> current;
	
	LinkedStackIterator(LinkedStack<E> stack) {
		current = stack.head;
	}
	
	public bool hasNext() {return current != null;}
	
	public E next() {
		if (hasNext()) {
			E temp = current.element;
			current = current.next;
			return temp;
		} else {
			System.error("No Such Element in a.util.LinkedStack.LinkedStackIterator.next() @" 
					+ (int)this);
			return null;
		}
	}
	
	public void remove() {
		System.error("Unsupported Operation in a.util.LinkedStack.LinkedStackIterator.remove() @" 
				+ (int)this);
	}
}
