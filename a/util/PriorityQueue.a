package a.util;

import a.util.Heap;
import a.util.Iterable;
import a.util.Iterator;

/**
 * Heap-based priority queue implementation.
 * Maximum elements are first in the queue.
 * @author XPilot
 */
public class PriorityQueue<E> extends Iterable<E> {
	public static const int DEFAULT_CAPACITY = 7;
	
	int ptr;
	private int size;
	private int capacity;
	private Comparator<E> comparator;
	
	public PriorityQueue(Comparator<E> comparator) {
		this(DEFAULT_CAPACITY, comparator);
	}
	
	public PriorityQueue(int capacity, Comparator<E> comparator) {
		ptr = Heap.malloc(capacity);
		this.comparator = comparator;
		this.capacity = Heap.round(capacity);
		size = 0;
	}
	
	public ~PriorityQueue() {
		Heap.free(ptr);
	}
	
	public int size() {
		return size;
	}
	
	public bool isEmpty() {
		return size == 0;
	}
	
	private static int left(int i) {
		return (i << 1) + 1;
	}
	
	private static int right(int i) {
		return (i + 1) << 1;
	}
	
	private static int parent(int i) {
		return (i - 1) >> 1;
	}
	
	private void fixUpward(int i) {
		while ((i > 0) && comparator.compare((E)Heap.array[ptr + i], (E)Heap.array[ptr + parent(i)]) > 0) {
			Heap.swap(ptr + i, ptr + parent(i));
			i = parent(i);
		}
	}
	
	private void fixDownward(int i) {
		int max;
		while (true) {
			int left = left(i);
			int right = left + 1;
			if (right > size) {
				return;
			} else if (right == size || 
					comparator.compare((E)Heap.array[ptr + left], (E)Heap.array[ptr + right]) >= 0) {
				max = left;
			} else {
				max = right;
			}
			if (comparator.compare((E)Heap.array[ptr + i], (E)Heap.array[ptr + max]) < 0) {
				Heap.swap(ptr + i, ptr + max);
				i = max;
			} else {
				return;
			}
		}
	}
	
	protected void remove(int i) {
		E removed = (E)Heap.array[ptr + i];
		int lastPos = size - 1;
		if (i == lastPos) {
			--size;
		} else {
			Heap.swap(lastPos, i);
			--size;
			if (comparator.compare((E)Heap.array[ptr + i], removed) >= 0) {
				fixUpward(i);
			} else {
				fixDownward(i);
			}
		}
	}
	
	void removeRedirect(int i) {
		remove(i);
	}
	
	public void offer(E element) {
		if(size == capacity) {
			ptr = Heap.realloc(ptr, size + 1);
			capacity = Heap.round(size + 1);
		}
		
		Heap.array[ptr + size] = (int)element;
		fixUpward(size);
		size++;
	}
	
	public E poll() {
		if(size == 0) return null;
		E first = (E)Heap.array[ptr];
		size--;
		Heap.array[ptr] = Heap.array[ptr + size];
		fixDownward(0);
		return first;
	}
	
	public E peek() {
		if(size == 0) return null;
		return (E)Heap.array[ptr];
	}
	
	public Iterator<E> getIterator() {
		return new PriorityQueueIterator<E>(this);
	}
}

private class PriorityQueueIterator<E> extends Iterator<E> {
	PriorityQueue<E> queue;
	int index;
	
	PriorityQueueIterator(PriorityQueue<E> queue) {
		this.queue = queue;
		this.index = 0;
	}
	
	public override bool hasNext() {
		return index < queue.size();
	}
	
	public override E next() {
		if (hasNext()) {
			return (E)Heap.array[queue.ptr + index++];
		} else {
			System.error("No Such Element in a.util.PriorityQueue.PriorityQueueIterator.next() @" 
					+ (int)this);
			return null;
		}
	}
	
	public void remove() {
		System.error("Unsupported Operation in a.util.PriorityQueue.PriorityQueueIterator.remove() @" 
					+ (int)this);
	}
}
