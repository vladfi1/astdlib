package a.util;

import a.util.Heap;
import a.util.HeapUtil;

/**
 * Simple array built on the Heap.
 * Does not perform bounds checks.
 * @author XPilot
 */
public class Array<E> [512] {
	
	/**
	 * Index in the Heap.
	 */
	private int index;
	/**
	 * Length of the array.
	 */
	public /* final */ int length;
	
	public Array(int length) {
		if(length == 0) index = -1;
		else index = Heap.alloc(length);
		this.length = length;
	}
	
	~Array() {
		Heap.dealloc(index);
	}
	
	/**
	 * Stores a value at index.
	 * Does not perform bounds checks.
	 */
	public void setIndex(int index, E value) {
		Heap.array[this.index + index] = (int)value;
	}
	
	/**
	 * Retrieves the value at index.
	 * Does not perform bounds checks.
	 */
	public E getIndex(int index) {
		return (E)Heap.array[this.index + index];
	}
	
	/**
	 * A shallow copy of this array.
	 */
	public Array<E> clone() {
		Array<E> clone = new Array<E>(length);
		HeapUtil.copy(index, clone.index, length);
		return clone;
	}
	
	/**
	 * @return An iterator for this Array.
	 */
	public ArrayIterator<E> getIterator() {
		return new ArrayIterator(this);
	}
	
	/**
	 * @return Whether this ArrayList contains element.
	 */
	public bool contains(E element) {
		for(int i = 0; i < size; i++) {
			if(getIndex(i) == element) return true;
		}
		return false;
	}
	
	/**
	 * Sorts this ArrayList in ascending order.
	 */
	public void sort(Comparator<E> comparator) {
		HeapSort.heapSort(index, size, comparator);
	}
	
	/**
	 * Searches for element assuming that the list is in ascending order.
	 * @return The index of the element, or -1 if not found.
	 */
	public int binarySearch(E element, Comparator<E> comparator) {
		return HeapUtil.binarySearch(index, size, element, comparator);
	}
}

/**
 * Iterator for Array.
 */
private class ArrayIterator<E> [64] {
	private Array<E> array;
	private int index;
	
	ArrayIterator(Array<E> array) {
		this.array = array;
		index = 0;
	}
	
	public bool hasNext() {
		return index < array.length;
	}
	
	public E next() {
		E temp = array.getIndex(index);
		index++;
		return temp;
	}
}
