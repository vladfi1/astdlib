package a.natives;
/*
*	Enrichment for native type 'timer'
*	@author Kricz
*/
public enrich timer{

	//Variables used by the start-method as timeType

	
	
	//GameTime - Takes into account the current game speed, 

	//and will pass more slowly at slow speeds, and vice versa.

	public static const int GAME_TIME				= 0;
	
	//Real Time - Passes at the same rate regardless of game speed, and approximates time 

	//passing in the real world for the user.  However, "real" time is still synchronous,

	//and will therefore be affected by lag due to network or system issues.

	public static const int REAL_TIME				= 1;
	
	//AI Time - Passes at the same rate as game time, but may be paused/unpaused 

	//independently of game time via triggers.  This is most commonly done to

	//pause the AI while an in-game cinematic sequence is run.

	public static const int AI_TIME  				= 2;
	

	/**
	*	Creates a new timer
	*	@return the created timer
	*/
	public static timer create(){
		return TimerCreate();
	}
	
	
	/**
	*	Destroys the timer
	*/
	public void destroy(){
		TimerPause(this); //may not required but safety goes first...

		return TimerDestroy(this);
	}
	
	
	/**
	*	Starts the timer with custom options
	*	@duration the duration of the timer
	*	@periodic should the timer be runned more than one time?
	*	@timeType look at the top of the script for more information
	*/
	public void start(fixed duration, bool periodic, int timeType){
		TimerStart(this, duration, periodic, timeType);
	}
	
	
	/**
	*	Starts a periodical timer
	*	@duration the duration of the timer
	*	@timeType look at the top of the script for more information
	*/
	public void startPeriodic(fixed duration, int timeType){
		TimerStart(this, duration, true, timeType);
	}
	
	/**
	*	Starts a the timer just one time
	*	@duration the duration of the timer
	*	@timeType look at the top of the script for more information
	*/
	public void startOnce(fixed duration, int timeType){
		TimerStart(this, duration, false, timeType);
	}
	
	
	/**
	*	The remaining time of the timer (readonly)
	*/
	public fixed remaining{
		public get{
			return TimerGetRemaining(this);
		}
	}
	
	
	/**
	*	The duration of the timer (readonly)
	*/
	public fixed duration{
		public get{
			return TimerGetDuration(this);
		}
	}
	
	
	/**
	*	The elapsed time of the timer (readonly)
	*/
	public fixed elapsed{
		public get{
			return TimerGetElapsed(this);
		}
	}
	
	
	/**
	*	pauses the timer or checks, if it is paused
	*/
	public bool paused{
		//readonly

		public get{
			return TimerIsPaused(this);
		}
		//usable

		public set{
			TimerPause(this, value);
		}
	}
	
	
	/**
	*	Restarts the timer
	*/
	public void restart(){
		TimerRestart(this);
	}

}