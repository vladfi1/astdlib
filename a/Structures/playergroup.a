package a.natives;
/*
*	Enrichment for native type 'playergroup'
*	@author NewName
*/

public enrich playergroup
{
	/**
	*	Create a player group containing all players in the game.
	*	@return a playergroup containing all players.
	*/
	public static playergroup allPlayers()
	{
		return PlayerGroupAll();
	}
	
	/**
	*	Create a player group containing all active players in the game.
	*	@return a playergroup containing all active players.
	*/
	public static playergroup activePlayers()
	{
		return PlayerGroupActive();
	}
	
	/**
	*	Create an empty player group.
	*	@return an empty playergroup.
	*/
	public static playergroup empty()
	{
		return PlayerGroupEmpty();
	}
	
	/**
	*	Create a copy of this playergroup.
	*	@return the copy.
	*/
	public playergroup copy()
	{
		return PlayerGroupCopy(this);
	}

	/**
	*	Clear all players from this playergroup.
	*/
	public void clear()
	{
		PlayerGroupClear(this);
	}

	/**
	*	Add the given player to this playergroup.
	*	@param p the player to add.
	*/
	public void add(player p)
	{
		PlayerGroupAdd(this, (int)p);
	}
	
	/**
	*	Add all players in the specified player group to this player group.
	*	@param group the player group to add.
	*/
	public void addGroup(playergroup group)
	{
		// Mimics AddPlayerGroupToPlayerGroup(group, this);

		for (int i = 1; i <= group.count(); i++) this.add(group.getPlayer(i));
	}

	/**
	*	Remove the given player from this player group.
	*	@param p the player to remove.
	*/
	public void remove(player p)
	{
		PlayerGroupRemove(this, (int)p);
	}
	
	/**
	*	Remove all players in the specified player group from this player group.
	*	@param group the player group to remove.
	*/
	public void removeGroup(playergroup group)
	{
		// Mimics RemovePlayerGroupFromPlayerGroup(group, this);

		for (int i = 1; i <= group.count(); i++) this.remove(group.getPlayer(i));
	}

	/**
	*	Returns the number of players in this player group.
	*	@return the number of players.
	*/
	public int count()
	{
		return PlayerGroupCount(this);
	}

	/**
	*	Get the player at the specified index of this player group.
	*	@param index the index for the desired player.
	*	@return the player at the specified index.
	*/
	public player getPlayer(int index)
	{
		return (player)PlayerGroupPlayer(this, index);
	}

	/**
	*	Searches this player group for the specified player. Returns true if found.
	*	@param p the player to search for.
	*	@return true if this player group contains the specified player, false otherwise.
	*/
	public bool containsPlayer(player p)
	{
		return PlayerGroupHasPlayer(this, (int)p);
	}
}