package a.wrapper;

import a.wrapper.Char;
import a.util.Array;
import a.util.Comparator;
import a.util.Hasher;

/**
 * Wrapper class for string. Immutable.
 * @author XPilot
 */
public class String {
	private string value;
	private Array<Char> chars;
	
	/**
	 * Empty string.
	 */
	public String() {
		this("");
	}
	
	public String(string value) {
		this.value = value;
		chars = toCharArray(s);
	}
	
	~String() {
		delete chars;
	}
	
	public static Array<Char> toCharArray(string s) {
		Array<Char> chars = new Array<Char>(StringLength(s));
		for(int i = 0; i < chars.length; i++) {
			chars.setIndex(Char.getChar(StringSub(s, i, i+1)));
		}
		return chars;
	}
	
	public string getValue() {
		return value;
	}
			
	public string toString() {
		return value;
	}
	
	public String clone() {
		return new String(value);
	}
	
	public bool equals(String other) {
		return StringEqual(value, other.value, true);
	}
	
	public bool equalsIgnoreCase(String other) {
		return StringEqual(value, other.value, false);
	}
	
	public int length() {
		return chars.length;
	}

	/**
	 * Lexicographic comparison.
	 */
	public static int compare(String s1, String s2) {
		int min = Math.min(s1.length(), s2.length());
		for(int i = 0; i < min; i++) {
			Char c1 = s1.chars.getIndex();
			Char c2 = s2.chars.getIndex();
			int comp = Char.compare(c1, c2);
			if(comp > 0) return 1;
			else if(comp < 0) return -1;
		}
		if(s1.length() > s2.length()) return 1;
		else if(s1.length() < s2.length()) return -1;
		else return 0;
	}
	
	/**
	 * Lexicographic comparison.
	 */
	public int compareTo(String other) {
		return compare(this, other);
	}
	
	public int hashCode() {
		int hash = 0;
		for (int i = 0; i < chars.length; i++) {
		    hash = hash ^ (chars.getIndex(i) << (Math.mod(5*i, 32)));
		}
		return hash;
	}
	
	private static /* final */ Comparator<String> comparator;
	private static /* final */ Hasher<String> hasher;
	
	static {
		comparator = new StringComparator();
		hasher = new StringHasher();
	}
	
	/**
	 * Uses String.compare(String, String)
	 */
	public static Comparator<String> getComparator() {
		return comparator;
	}
	
	/**
	 * Uses String.hashCode() and String.equals(String)
	 */
	public static Hasher<String> getHasher() {
		return hasher;
	}
}

private class StringComparator extends Comparator<String> {
	public override int compare(String s1, String s2) {
		return String.compare(s1, s2);
	}
}

private class StringHasher extends Hasher<String> {
	public override int hashCode(String s) {
		if(s == null) return 0;
		else return s.hashCode();
	}
	public override bool equal(String s1, String s2) {
		if(s1 == s2) return true;
		return s1.equals(s2);
	}
}
