package geom;

/**
 * Represents a 2-dimensional vector.
 * @author XPilot
 */
public class Vector2D {

	/**
	 * X and Y components.
	 */
	public fixed x, y;
	
	/**
	 * Creates a vector at the origin.
	 */
	public Vector2D() {
		setZero();
	}
	
	/**
	 * Creates a vector at <x1, y1>
	 */
	public Vector2D(fixed x, fixed y) {
		this.x = x;
		this.y = y;
	}
	
	/**
	 * Creates a vector at v.
	 */
	public Vector2D(Vector2D v) {
		x = v.x;
		y = v.y;
	}
	
	/**
	 * Clones this vector.
	 */
	public Vector2D clone() {
		return new Vector2D(this);
	}
	
	/**
	 * Sets this vector to <x, y>
	 */
	public Vector2D setVector(fixed x, fixed y) {
		this.x = x;
		this.y = y;
		return this;
	}
	
	/**
	 * Sets this vector to v.
	 */
	public Vector2D setVector(Vector2D v) {
		x = v.x;
		y = v.y;
		return this;
	}

	/**
	 * Sets this vector to p.
	 */
	public Vector2D setVector(point p) {
		x = PointGetX(p);
		y = PointGetY(p);
		return this;
	}
	
	public Vector2D setPolar(fixed r, fixed theta) {
		return setVector(r * Cos(theta), r * Sin(theta));
	}
	
	/**
	 * Sets the vector to <0, 0>
	 * @return This vector.
	 */
	public Vector2D setZero() {
		x = y = 0;
		return this;
	}
	
	/**
	 * Determines whether this vector and v have the same components.
	 */
	public bool equals(Vector2D v) {
		return x == v.x && y == v.y;
	}
	
	/**
	 * Calculates and returns the sum of v1 and v2.
	 */
	public static Vector2D sum(Vector2D v1, Vector2D v2) {
		return new Vector2D(v1.x + v2.x, v1.y + v2.y);
	}
	
	/**
	 * Calculates the sum of v1 and v2 and stores the result in result.
	 */
	public static Vector2D sum(Vector2D v1, Vector2D v2, Vector2D result) {
		return result.setVector(v1.x + v2.x, v1.y + v2.y);
	}
	
	/**
	 * Calculates and returns the difference of v1 and v2.
	 */
	public static Vector2D difference(Vector2D v1, Vector2D v2) {
		return new Vector2D(v1.x - v2.x, v1.y - v2.y);
	}
	
	/**
	 * Calculates the difference of v1 and v2 and stores the result in result.
	 * @return result
	 */
	public static Vector2D difference(Vector2D v1, Vector2D v2, Vector2D result) {
		return result.setVector(v1.x - v2.x, v1.y - v2.y);
	}
	
	/**
	 * @return The distance between v1 and v2.
	 */
	public static fixed distance(Vector2D v1, Vector2D v2) {
		fixed dx = v2.x - v1.x;
		fixed dy = v2.y - v1.y;
		return SquareRoot(dx * dx + dy * dy);
	}
	
	/**
	 * @return The distance squared between v1 and v2.
	 */
	public static fixed distance2(Vector2D v1, Vector2D v2) {
		fixed dx = v2.x - v1.x;
		fixed dy = v2.y - v1.y;
		return SquareRoot(dx * dx + dy * dy);
	}
	
	/**
	 * Calculates and returns the dot product of v1 and v2.
	 */
	public static fixed dot(Vector2D v1, Vector2D v2) {
		return v1.x * v2.x + v1.y * v2.y;
	}
	
	/**
	 * Calculates and returns the dot product of this and v.
	 */
	public fixed dot(Vector2D v) {
		return dot(this, v);
	}
	
	/**
	 * Calculates and returns the (signed) magnitude of the cross product of v1 and v2.
	 */
	public static fixed cross(Vector2D v1, Vector2D v2) {
		return v1.x * v2.y - v1.y * v2.x;
	}
	
	/**
	 * Calculates and returns the (signed) magnitude of the cross product of this and v.
	 */
   	public fixed cross(Vector2D v) {
		return cross(this, v);
	}
	
	/**
	 * Adds v to this vector.
	 * @return This vector.
	 */
	public Vector2D add(Vector2D v) {
		x += v.x;
		y += v.y;
		return this;
	}
	
	/**
	 * Adds scale * v to this vector;
	 * @return This vector.
	 */
	public Vector2D add(Vector2D v, fixed scale) {
		x += v.x * scale;
		y += v.y * scale;
		return this;
	}
	
	/**
	 * Adds <x, y> to this vector's components.
	 * @return This vector.
	 */
	public Vector2D add(fixed x, fixed y) {
		this.x += x;
		this.y += y;
		return this;
	}
	
	/**
	 * Subtracts v from this vector.
	 * @return This vector.
	 */
	public Vector2D subtract(Vector2D v) {
		x -= v.x;
		y -= v.y;
		return this;
	}
	
	/**
	 * Multiplies this vector by a.
	 * @return This vector.
	 */
	public Vector2D multiply(fixed a) {
		x = x * a;
		y = y * a;
		return this;
	}
	
	/**
	 * Divides this vector by a.
	 * @return This vector.
	 */
	public Vector2D divide(fixed a) {
		x = x / a;
		y = y / a;
		return this;
	}
	
	/**
	 * @return The magnitude of this vector.
	 */
	public fixed magnitude() {
		return SquareRoot(x * x + y * y);
	}
	
	/**
	 * @return The magnitude squared of this vector.
	 */
	public fixed magnitude2() {
		return x * x + y * y;
	}
	
	/**
	 * Normalizes this vector.
	 * @return This vector.
	 */
	public Vector2D normalize() {
		fixed magnitude = magnitude();
		if(magnitude != 0) divide(magnitude);
		return this;
	}
	
	/**
	 * Negates this vector.
	 * @return This vector.
	 */
	public Vector2D negate() {
		x = -x;
		y = -y;
		return this;
	}
	
	/**
	 * Stores the minimum of v1 and v2 (component-wise) in result.
	 * @return result
	 */
	public static Vector2D min(Vector2D v1, Vector2D v2, Vector2D result) {
		return result.setVector(MinF(v1.x, v2.x), MinF(v1.y, v2.y));
	}
	
	/**
	 * Stores the maximum of v1 and v2 (component-wise) in result.
	 * @return result
	 */
	public static Vector2D max(Vector2D v1, Vector2D v2, Vector2D result) {
		return result.setVector(MaxF(v1.x, v2.x), MaxF(v1.y, v2.y));
	}
	
	/**
	 * Rotates this vector 90 degrees clockwise.
	 */
	public Vector2D rotClock90() {
		fixed y1 = y;
		y = -x;
		x = y1;
		return this;
	}
	
	/**
	 * Rotates this vector 90 degrees counter clockwise.
	 */
	public Vector2D rotCount90() {
		fixed y1 = y;
		y = x;
		x = -y1;
		return this;
	}
	
	/**
	 * Returns a string representation of this vector.
	 */
	public string toString() {
		return toString(c_fixedPrecisionAny);
	}
	
	/**
	 * Returns a string representation of this vector.
	 * @param The fixed precision.
	 */
	public string toString(int precision) {
		return "<" + FixedToString(x, precision) + ", " + FixedToString(y, precision) + ">";
	}
	
	/**
	 * Returns a point with this vector's x and y components.
	 */
	public point toPoint() {
		return Point(x, y);
	}
}
